#ABC357-E
#https://qiita.com/AkariLuminous/items/a2c789cebdd098dcb503#51-internal_scc
#強連結成分分解：DFSを用いてグループ閉路内で行き来が可能なものにまとめたもの
#add_edge(a,b) : aからbへ行ける経路を追加する
#scc           : 強連結成分を持ったグループを返す(トポロジカルソートされている)
#トポロジカルソート：入力次数の少ない順にソートされたもの。右が多く入力がくる終点。

from atcoder.scc import SCCGraph

# 本記事で扱った具体例
n = 10
E = [
    [0, 1],
    [0, 2],
    [1, 4],
    [2, 6],
    [2, 0],
    [2, 8],
    [3, 5],
    [3, 1],
    [4, 3],
    [4, 7],
    [5, 3],
    [6, 8],
    [6, 7],
    [7, 9],
    [7, 3],
    [8, 6],
    [8, 7],
]

#強連結成分をまとめたグラフの作成　SCCGraph(n) n: 頂点数
scc_graph = SCCGraph(n)

#各頂点間のグラフ関係を埋める
for a, b in E:
    scc_graph.add_edge(a, b)

#グループを取得する
groups = scc_graph.scc()
print(groups) # [[0, 2], [6, 8], [1, 3, 4, 5, 7], [9]]
