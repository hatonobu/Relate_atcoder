def cumulative_sum_2d(matrix):
    # 元の行列のサイズを取得
    rows = len(matrix)
    cols = len(matrix[0])
    
    # 初めに0で満たされた累積和を格納するための行列を作成
    cum_sum = [[0] * (cols + 1) for _ in range(rows + 1)]
    
    # 累積和を計算
    for i in range(1, rows + 1):
        for j in range(1, cols + 1):
            cum_sum[i][j] = (matrix[i-1][j-1] +
                             cum_sum[i-1][j] +
                             cum_sum[i][j-1] -
                             cum_sum[i-1][j-1])
    
    return cum_sum

"""
ABC366-D Cubid Sum Query
Q = ii()
for i in range(Q):
    x1,x2,y1,y2,z1,z2 = mi()
    y1 -= 1
    z1 -= 1
    ans = 0
    for i in range(x1-1,x2):
        ans += ruisekiMatrix[i][y2][z2] - ruisekiMatrix[i][y1][z2] - ruisekiMatrix[i][y2][z1] + ruisekiMatrix[i][y1][z1]
        #print(ruisekiMatrix[i][y2][z2], ruisekiMatrix[i][y1][z2], ruisekiMatrix[i][y2][z2], ruisekiMatrix[i][y1][z1])
    print(ans)
"""

def cumulative_sum_3d(matrix):
    # 元の行列のサイズを取得
    depth = len(matrix)
    rows = len(matrix[0])
    cols = len(matrix[0][0])
    
    # 初めに0で満たされた累積和を格納するための行列を作成
    cum_sum = [[[0] * (cols + 1) for _ in range(rows + 1)] for _ in range(depth + 1)]
    
    # 累積和を計算
    for k in range(1, depth + 1):
        for i in range(1, rows + 1):
            for j in range(1, cols + 1):
                cum_sum[k][i][j] = (matrix[k-1][i-1][j-1] +
                                    cum_sum[k-1][i][j] +
                                    cum_sum[k][i-1][j] +
                                    cum_sum[k][i][j-1] -
                                    cum_sum[k-1][i-1][j] -
                                    cum_sum[k-1][i][j-1] -
                                    cum_sum[k][i-1][j-1] +
                                    cum_sum[k-1][i-1][j-1])
    
    return cum_sum

"""
ABC366-D Cubid Sum Query
Q = ii()
for i in range(Q):
    x1,x2,y1,y2,z1,z2 = mi()
    x1 -= 1
    y1 -= 1
    z1 -= 1
    ans = (ruisekiMatrix[x2][y2][z2]
    - ruisekiMatrix[x1][y2][z2]
    - ruisekiMatrix[x2][y1][z2]
    - ruisekiMatrix[x2][y2][z1]
    + ruisekiMatrix[x1][y1][z2]
    + ruisekiMatrix[x1][y2][z1]
    + ruisekiMatrix[x2][y1][z1]
    - ruisekiMatrix[x1][y1][z1])
    print(ans)
    
"""